{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Siddhi IO S3 The siddhi-io-s3 is a Siddhi extension which allows to publish events to Amazon AWS S3 buckets. For information on Siddhi and it's features refer Siddhi Documentation . Download Versions 1.x with group id io.siddhi.extension.* from here . Latest API Docs Latest API Docs is 1.0.5 . Features copy ( Stream Function ) Copy a file within Amazon AWS S3 buckets. delete ( Stream Function ) Delete an object from an Amazon AWS S3 bucket uploadFile ( Stream Function ) Uploads a file to an Amazon AWS S3 bucket s3 ( Sink ) S3 sink publishes events as Amazon AWS S3 buckets. Dependencies There are no other dependencies needed for this extension. Installation For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions . Support and Contribution We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Welcome"},{"location":"#siddhi-io-s3","text":"The siddhi-io-s3 is a Siddhi extension which allows to publish events to Amazon AWS S3 buckets. For information on Siddhi and it's features refer Siddhi Documentation .","title":"Siddhi IO S3"},{"location":"#download","text":"Versions 1.x with group id io.siddhi.extension.* from here .","title":"Download"},{"location":"#latest-api-docs","text":"Latest API Docs is 1.0.5 .","title":"Latest API Docs"},{"location":"#features","text":"copy ( Stream Function ) Copy a file within Amazon AWS S3 buckets. delete ( Stream Function ) Delete an object from an Amazon AWS S3 bucket uploadFile ( Stream Function ) Uploads a file to an Amazon AWS S3 bucket s3 ( Sink ) S3 sink publishes events as Amazon AWS S3 buckets.","title":"Features"},{"location":"#dependencies","text":"There are no other dependencies needed for this extension.","title":"Dependencies"},{"location":"#installation","text":"For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions .","title":"Installation"},{"location":"#support-and-contribution","text":"We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Support and Contribution"},{"location":"license/","text":"Copyright (c) 2019 WSO2 Inc. ( http://www.wso2.org ) All Rights Reserved. WSO2 Inc. licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ------------------------------------------------------------------------- Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. License shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. Licensor shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. Legal Entity shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, control means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. You (or Your ) shall mean an individual or Legal Entity exercising permissions granted by this License. Source form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. Object form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. Work shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). Derivative Works shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. Contribution shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, submitted means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as Not a Contribution. Contributor shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a NOTICE text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","title":"License"},{"location":"api/1.0.0/","text":"API Docs - v1.0.0 Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions. Sink s3 (Sink) S3 sink publishes events as Amazon AWS S3 buckets. Syntax @sink(type= s3 , credential.provider.class= STRING , aws.access.key= STRING , aws.secret.key= STRING , bucket.name= STRING , aws.region= STRING , versioning.enabled= BOOL , object.path= STRING , storage.class= STRING , content.type= STRING , bucket.acl= STRING , node.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No bucket.name Name of the S3 bucket STRING No No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No versioning.enabled Flag to enable versioning support in the bucket false BOOL Yes No object.path Path for each S3 object STRING No Yes storage.class AWS storage class standard STRING Yes No content.type Content type of the event application/octet-stream STRING Yes Yes bucket.acl Access control list for the bucket EMPTY_STRING STRING Yes No node.id The node ID of the current publisher. This needs to be unique for each publisher instance as it may cause object overwrites while uploading the objects to same S3 bucket from different publishers. EMPTY_STRING STRING Yes No Examples EXAMPLE 1 @sink(type='s3', bucket.name='user-stream-bucket',object.path='bar/users', credential.provider='com.amazonaws.auth.profile.ProfileCredentialsProvider', flush.size='3', @map(type='json', enclosing.element='$.user', @payload( { name : {{name}} , age : {{age}}} ))) define stream UserStream(name string, age int); This creates a S3 bucket named 'user-stream-bucket'. Then this will collect 3 events together and create a JSON object and save that in S3.","title":"1.0.0"},{"location":"api/1.0.0/#api-docs-v100","text":"Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions.","title":"API Docs - v1.0.0"},{"location":"api/1.0.0/#sink","text":"","title":"Sink"},{"location":"api/1.0.0/#s3-sink","text":"S3 sink publishes events as Amazon AWS S3 buckets. Syntax @sink(type= s3 , credential.provider.class= STRING , aws.access.key= STRING , aws.secret.key= STRING , bucket.name= STRING , aws.region= STRING , versioning.enabled= BOOL , object.path= STRING , storage.class= STRING , content.type= STRING , bucket.acl= STRING , node.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No bucket.name Name of the S3 bucket STRING No No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No versioning.enabled Flag to enable versioning support in the bucket false BOOL Yes No object.path Path for each S3 object STRING No Yes storage.class AWS storage class standard STRING Yes No content.type Content type of the event application/octet-stream STRING Yes Yes bucket.acl Access control list for the bucket EMPTY_STRING STRING Yes No node.id The node ID of the current publisher. This needs to be unique for each publisher instance as it may cause object overwrites while uploading the objects to same S3 bucket from different publishers. EMPTY_STRING STRING Yes No Examples EXAMPLE 1 @sink(type='s3', bucket.name='user-stream-bucket',object.path='bar/users', credential.provider='com.amazonaws.auth.profile.ProfileCredentialsProvider', flush.size='3', @map(type='json', enclosing.element='$.user', @payload( { name : {{name}} , age : {{age}}} ))) define stream UserStream(name string, age int); This creates a S3 bucket named 'user-stream-bucket'. Then this will collect 3 events together and create a JSON object and save that in S3.","title":"s3 (Sink)"},{"location":"api/1.0.1/","text":"API Docs - v1.0.1 Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions. Sink s3 (Sink) S3 sink publishes events as Amazon AWS S3 buckets. Syntax @sink(type= s3 , credential.provider.class= STRING , aws.access.key= STRING , aws.secret.key= STRING , bucket.name= STRING , aws.region= STRING , versioning.enabled= BOOL , object.path= STRING , storage.class= STRING , content.type= STRING , bucket.acl= STRING , node.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No bucket.name Name of the S3 bucket STRING No No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No versioning.enabled Flag to enable versioning support in the bucket false BOOL Yes No object.path Path for each S3 object STRING No Yes storage.class AWS storage class standard STRING Yes No content.type Content type of the event application/octet-stream STRING Yes Yes bucket.acl Access control list for the bucket EMPTY_STRING STRING Yes No node.id The node ID of the current publisher. This needs to be unique for each publisher instance as it may cause object overwrites while uploading the objects to same S3 bucket from different publishers. EMPTY_STRING STRING Yes No Examples EXAMPLE 1 @sink(type='s3', bucket.name='user-stream-bucket',object.path='bar/users', credential.provider='com.amazonaws.auth.profile.ProfileCredentialsProvider', flush.size='3', @map(type='json', enclosing.element='$.user', @payload( { name : {{name}} , age : {{age}}} ))) define stream UserStream(name string, age int); This creates a S3 bucket named 'user-stream-bucket'. Then this will collect 3 events together and create a JSON object and save that in S3.","title":"1.0.1"},{"location":"api/1.0.1/#api-docs-v101","text":"Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions.","title":"API Docs - v1.0.1"},{"location":"api/1.0.1/#sink","text":"","title":"Sink"},{"location":"api/1.0.1/#s3-sink","text":"S3 sink publishes events as Amazon AWS S3 buckets. Syntax @sink(type= s3 , credential.provider.class= STRING , aws.access.key= STRING , aws.secret.key= STRING , bucket.name= STRING , aws.region= STRING , versioning.enabled= BOOL , object.path= STRING , storage.class= STRING , content.type= STRING , bucket.acl= STRING , node.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No bucket.name Name of the S3 bucket STRING No No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No versioning.enabled Flag to enable versioning support in the bucket false BOOL Yes No object.path Path for each S3 object STRING No Yes storage.class AWS storage class standard STRING Yes No content.type Content type of the event application/octet-stream STRING Yes Yes bucket.acl Access control list for the bucket EMPTY_STRING STRING Yes No node.id The node ID of the current publisher. This needs to be unique for each publisher instance as it may cause object overwrites while uploading the objects to same S3 bucket from different publishers. EMPTY_STRING STRING Yes No Examples EXAMPLE 1 @sink(type='s3', bucket.name='user-stream-bucket',object.path='bar/users', credential.provider='com.amazonaws.auth.profile.ProfileCredentialsProvider', flush.size='3', @map(type='json', enclosing.element='$.user', @payload( { name : {{name}} , age : {{age}}} ))) define stream UserStream(name string, age int); This creates a S3 bucket named 'user-stream-bucket'. Then this will collect 3 events together and create a JSON object and save that in S3.","title":"s3 (Sink)"},{"location":"api/1.0.2/","text":"API Docs - v1.0.2 Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions. Sink s3 (Sink) S3 sink publishes events as Amazon AWS S3 buckets. Syntax @sink(type= s3 , credential.provider.class= STRING , aws.access.key= STRING , aws.secret.key= STRING , bucket.name= STRING , aws.region= STRING , versioning.enabled= BOOL , object.path= STRING , storage.class= STRING , content.type= STRING , bucket.acl= STRING , node.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No bucket.name Name of the S3 bucket STRING No No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No versioning.enabled Flag to enable versioning support in the bucket false BOOL Yes No object.path Path for each S3 object STRING No Yes storage.class AWS storage class standard STRING Yes No content.type Content type of the event application/octet-stream STRING Yes Yes bucket.acl Access control list for the bucket EMPTY_STRING STRING Yes No node.id The node ID of the current publisher. This needs to be unique for each publisher instance as it may cause object overwrites while uploading the objects to same S3 bucket from different publishers. EMPTY_STRING STRING Yes No Examples EXAMPLE 1 @sink(type='s3', bucket.name='user-stream-bucket',object.path='bar/users', credential.provider='software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider', flush.size='3', @map(type='json', enclosing.element='$.user', @payload( { name : {{name}} , age : {{age}}} ))) define stream UserStream(name string, age int); This creates a S3 bucket named 'user-stream-bucket'. Then this will collect 3 events together and create a JSON object and save that in S3.","title":"1.0.2"},{"location":"api/1.0.2/#api-docs-v102","text":"Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions.","title":"API Docs - v1.0.2"},{"location":"api/1.0.2/#sink","text":"","title":"Sink"},{"location":"api/1.0.2/#s3-sink","text":"S3 sink publishes events as Amazon AWS S3 buckets. Syntax @sink(type= s3 , credential.provider.class= STRING , aws.access.key= STRING , aws.secret.key= STRING , bucket.name= STRING , aws.region= STRING , versioning.enabled= BOOL , object.path= STRING , storage.class= STRING , content.type= STRING , bucket.acl= STRING , node.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No bucket.name Name of the S3 bucket STRING No No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No versioning.enabled Flag to enable versioning support in the bucket false BOOL Yes No object.path Path for each S3 object STRING No Yes storage.class AWS storage class standard STRING Yes No content.type Content type of the event application/octet-stream STRING Yes Yes bucket.acl Access control list for the bucket EMPTY_STRING STRING Yes No node.id The node ID of the current publisher. This needs to be unique for each publisher instance as it may cause object overwrites while uploading the objects to same S3 bucket from different publishers. EMPTY_STRING STRING Yes No Examples EXAMPLE 1 @sink(type='s3', bucket.name='user-stream-bucket',object.path='bar/users', credential.provider='software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider', flush.size='3', @map(type='json', enclosing.element='$.user', @payload( { name : {{name}} , age : {{age}}} ))) define stream UserStream(name string, age int); This creates a S3 bucket named 'user-stream-bucket'. Then this will collect 3 events together and create a JSON object and save that in S3.","title":"s3 (Sink)"},{"location":"api/1.0.3/","text":"API Docs - v1.0.3 Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions. Sink s3 (Sink) S3 sink publishes events as Amazon AWS S3 buckets. Syntax @sink(type= s3 , credential.provider.class= STRING , aws.access.key= STRING , aws.secret.key= STRING , bucket.name= STRING , aws.region= STRING , versioning.enabled= BOOL , object.path= STRING , storage.class= STRING , content.type= STRING , bucket.acl= STRING , node.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No bucket.name Name of the S3 bucket STRING No No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No versioning.enabled Flag to enable versioning support in the bucket false BOOL Yes No object.path Path for each S3 object STRING No Yes storage.class AWS storage class standard STRING Yes No content.type Content type of the event application/octet-stream STRING Yes Yes bucket.acl Access control list for the bucket EMPTY_STRING STRING Yes No node.id The node ID of the current publisher. This needs to be unique for each publisher instance as it may cause object overwrites while uploading the objects to same S3 bucket from different publishers. EMPTY_STRING STRING Yes No Examples EXAMPLE 1 @sink(type='s3', bucket.name='user-stream-bucket',object.path='bar/users', credential.provider='software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider', flush.size='3', @map(type='json', enclosing.element='$.user', @payload( { name : {{name}} , age : {{age}}} ))) define stream UserStream(name string, age int); This creates a S3 bucket named 'user-stream-bucket'. Then this will collect 3 events together and create a JSON object and save that in S3.","title":"1.0.3"},{"location":"api/1.0.3/#api-docs-v103","text":"Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions.","title":"API Docs - v1.0.3"},{"location":"api/1.0.3/#sink","text":"","title":"Sink"},{"location":"api/1.0.3/#s3-sink","text":"S3 sink publishes events as Amazon AWS S3 buckets. Syntax @sink(type= s3 , credential.provider.class= STRING , aws.access.key= STRING , aws.secret.key= STRING , bucket.name= STRING , aws.region= STRING , versioning.enabled= BOOL , object.path= STRING , storage.class= STRING , content.type= STRING , bucket.acl= STRING , node.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No bucket.name Name of the S3 bucket STRING No No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No versioning.enabled Flag to enable versioning support in the bucket false BOOL Yes No object.path Path for each S3 object STRING No Yes storage.class AWS storage class standard STRING Yes No content.type Content type of the event application/octet-stream STRING Yes Yes bucket.acl Access control list for the bucket EMPTY_STRING STRING Yes No node.id The node ID of the current publisher. This needs to be unique for each publisher instance as it may cause object overwrites while uploading the objects to same S3 bucket from different publishers. EMPTY_STRING STRING Yes No Examples EXAMPLE 1 @sink(type='s3', bucket.name='user-stream-bucket',object.path='bar/users', credential.provider='software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider', flush.size='3', @map(type='json', enclosing.element='$.user', @payload( { name : {{name}} , age : {{age}}} ))) define stream UserStream(name string, age int); This creates a S3 bucket named 'user-stream-bucket'. Then this will collect 3 events together and create a JSON object and save that in S3.","title":"s3 (Sink)"},{"location":"api/1.0.4/","text":"API Docs - v1.0.4 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. S3 copy (Stream Function) Copy a file within Amazon AWS S3 buckets. Syntax s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key, STRING versioning.enabled) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key, STRING versioning.enabled, STRING bucket.acl) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic from.bucket.name Name of the S3 bucket which is copying from STRING No Yes from.key Key of the object to be copied STRING No Yes bucket.name Name of the destination S3 bucket STRING No Yes key Key of the destination object STRING No Yes async Toggle async mode false BOOL Yes Yes credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No storage.class AWS storage class for the destination object standard STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No versioning.enabled Flag to enable versioning support in the destination bucket false STRING Yes No bucket.acl Access control list for the destination bucket EMPTY_STRING STRING Yes No Examples EXAMPLE 1 from FooStream#s3:copy('stock-source-bucket', 'stocks.txt', 'stock-backup-bucket', '/backup/stocks.txt') Copy object from one bucket to another. delete (Stream Function) Delete an object from an Amazon AWS S3 bucket Syntax s3:delete( STRING bucket.name, STRING key) s3:delete( STRING bucket.name, STRING key, BOOL async) s3:delete( STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class) s3:delete( STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region) s3:delete( STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING aws.access.key, STRING aws.secret.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic bucket.name Name of the S3 bucket STRING No Yes key Key of the object STRING No Yes async Toggle async mode false BOOL Yes Yes credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No Examples EXAMPLE 1 from FooStream#s3:delete('s3-file-bucket', '/uploads/stocks.txt') Delete the object at '/uploads/stocks.txt' from the bucket. uploadFile (Stream Function) Uploads a file to an Amazon AWS S3 bucket Syntax s3:uploadFile( STRING file.path, STRING bucket.name, STRING key) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key, STRING versioning.enabled) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key, STRING versioning.enabled, STRING bucket.acl) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path Path of the file to be uploaded STRING No Yes bucket.name Name of the S3 bucket STRING No Yes key Key of the object STRING No Yes async Toggle async mode false BOOL Yes Yes credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No storage.class AWS storage class standard STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No versioning.enabled Flag to enable versioning support in the bucket false STRING Yes No bucket.acl Access control list for the bucket EMPTY_STRING STRING Yes No Examples EXAMPLE 1 from FooStream#s3:upload('/Users/wso2/files/stocks.txt', 's3-file-bucket', '/uploads/stocks.txt') Creates an object with the file content at '/uploads/stocks.txt' in the bucket. Sink s3 (Sink) S3 sink publishes events as Amazon AWS S3 buckets. Syntax @sink(type= s3 , credential.provider.class= STRING , aws.access.key= STRING , aws.secret.key= STRING , bucket.name= STRING , aws.region= STRING , versioning.enabled= BOOL , object.path= STRING , storage.class= STRING , content.type= STRING , bucket.acl= STRING , node.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No bucket.name Name of the S3 bucket STRING No No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No versioning.enabled Flag to enable versioning support in the bucket false BOOL Yes No object.path Path for each S3 object STRING No Yes storage.class AWS storage class standard STRING Yes No content.type Content type of the event application/octet-stream STRING Yes Yes bucket.acl Access control list for the bucket EMPTY_STRING STRING Yes No node.id The node ID of the current publisher. This needs to be unique for each publisher instance as it may cause object overwrites while uploading the objects to same S3 bucket from different publishers. EMPTY_STRING STRING Yes No Examples EXAMPLE 1 @sink(type='s3', bucket.name='user-stream-bucket',object.path='bar/users', credential.provider='software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider', flush.size='3', @map(type='json', enclosing.element='$.user', @payload( { name : {{name}} , age : {{age}}} ))) define stream UserStream(name string, age int); This creates a S3 bucket named 'user-stream-bucket'. Then this will collect 3 events together and create a JSON object and save that in S3.","title":"1.0.4"},{"location":"api/1.0.4/#api-docs-v104","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v1.0.4"},{"location":"api/1.0.4/#s3","text":"","title":"S3"},{"location":"api/1.0.4/#copy-stream-function","text":"Copy a file within Amazon AWS S3 buckets. Syntax s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key, STRING versioning.enabled) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key, STRING versioning.enabled, STRING bucket.acl) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic from.bucket.name Name of the S3 bucket which is copying from STRING No Yes from.key Key of the object to be copied STRING No Yes bucket.name Name of the destination S3 bucket STRING No Yes key Key of the destination object STRING No Yes async Toggle async mode false BOOL Yes Yes credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No storage.class AWS storage class for the destination object standard STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No versioning.enabled Flag to enable versioning support in the destination bucket false STRING Yes No bucket.acl Access control list for the destination bucket EMPTY_STRING STRING Yes No Examples EXAMPLE 1 from FooStream#s3:copy('stock-source-bucket', 'stocks.txt', 'stock-backup-bucket', '/backup/stocks.txt') Copy object from one bucket to another.","title":"copy (Stream Function)"},{"location":"api/1.0.4/#delete-stream-function","text":"Delete an object from an Amazon AWS S3 bucket Syntax s3:delete( STRING bucket.name, STRING key) s3:delete( STRING bucket.name, STRING key, BOOL async) s3:delete( STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class) s3:delete( STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region) s3:delete( STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING aws.access.key, STRING aws.secret.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic bucket.name Name of the S3 bucket STRING No Yes key Key of the object STRING No Yes async Toggle async mode false BOOL Yes Yes credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No Examples EXAMPLE 1 from FooStream#s3:delete('s3-file-bucket', '/uploads/stocks.txt') Delete the object at '/uploads/stocks.txt' from the bucket.","title":"delete (Stream Function)"},{"location":"api/1.0.4/#uploadfile-stream-function","text":"Uploads a file to an Amazon AWS S3 bucket Syntax s3:uploadFile( STRING file.path, STRING bucket.name, STRING key) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key, STRING versioning.enabled) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key, STRING versioning.enabled, STRING bucket.acl) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path Path of the file to be uploaded STRING No Yes bucket.name Name of the S3 bucket STRING No Yes key Key of the object STRING No Yes async Toggle async mode false BOOL Yes Yes credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No storage.class AWS storage class standard STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No versioning.enabled Flag to enable versioning support in the bucket false STRING Yes No bucket.acl Access control list for the bucket EMPTY_STRING STRING Yes No Examples EXAMPLE 1 from FooStream#s3:upload('/Users/wso2/files/stocks.txt', 's3-file-bucket', '/uploads/stocks.txt') Creates an object with the file content at '/uploads/stocks.txt' in the bucket.","title":"uploadFile (Stream Function)"},{"location":"api/1.0.4/#sink","text":"","title":"Sink"},{"location":"api/1.0.4/#s3-sink","text":"S3 sink publishes events as Amazon AWS S3 buckets. Syntax @sink(type= s3 , credential.provider.class= STRING , aws.access.key= STRING , aws.secret.key= STRING , bucket.name= STRING , aws.region= STRING , versioning.enabled= BOOL , object.path= STRING , storage.class= STRING , content.type= STRING , bucket.acl= STRING , node.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No bucket.name Name of the S3 bucket STRING No No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No versioning.enabled Flag to enable versioning support in the bucket false BOOL Yes No object.path Path for each S3 object STRING No Yes storage.class AWS storage class standard STRING Yes No content.type Content type of the event application/octet-stream STRING Yes Yes bucket.acl Access control list for the bucket EMPTY_STRING STRING Yes No node.id The node ID of the current publisher. This needs to be unique for each publisher instance as it may cause object overwrites while uploading the objects to same S3 bucket from different publishers. EMPTY_STRING STRING Yes No Examples EXAMPLE 1 @sink(type='s3', bucket.name='user-stream-bucket',object.path='bar/users', credential.provider='software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider', flush.size='3', @map(type='json', enclosing.element='$.user', @payload( { name : {{name}} , age : {{age}}} ))) define stream UserStream(name string, age int); This creates a S3 bucket named 'user-stream-bucket'. Then this will collect 3 events together and create a JSON object and save that in S3.","title":"s3 (Sink)"},{"location":"api/1.0.5/","text":"API Docs - v1.0.5 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. S3 copy (Stream Function) Copy a file within Amazon AWS S3 buckets. Syntax s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key, STRING versioning.enabled) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key, STRING versioning.enabled, STRING bucket.acl) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic from.bucket.name Name of the S3 bucket which is copying from STRING No Yes from.key Key of the object to be copied STRING No Yes bucket.name Name of the destination S3 bucket STRING No Yes key Key of the destination object STRING No Yes async Toggle async mode false BOOL Yes Yes credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No storage.class AWS storage class for the destination object standard STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No versioning.enabled Flag to enable versioning support in the destination bucket false STRING Yes No bucket.acl Access control list for the destination bucket EMPTY_STRING STRING Yes No Examples EXAMPLE 1 from FooStream#s3:copy('stock-source-bucket', 'stocks.txt', 'stock-backup-bucket', '/backup/stocks.txt') Copy object from one bucket to another. delete (Stream Function) Delete an object from an Amazon AWS S3 bucket Syntax s3:delete( STRING bucket.name, STRING key) s3:delete( STRING bucket.name, STRING key, BOOL async) s3:delete( STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class) s3:delete( STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region) s3:delete( STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING aws.access.key, STRING aws.secret.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic bucket.name Name of the S3 bucket STRING No Yes key Key of the object STRING No Yes async Toggle async mode false BOOL Yes Yes credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No Examples EXAMPLE 1 from FooStream#s3:delete('s3-file-bucket', '/uploads/stocks.txt') Delete the object at '/uploads/stocks.txt' from the bucket. uploadFile (Stream Function) Uploads a file to an Amazon AWS S3 bucket Syntax s3:uploadFile( STRING file.path, STRING bucket.name, STRING key) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key, STRING versioning.enabled) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key, STRING versioning.enabled, STRING bucket.acl) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path Path of the file to be uploaded STRING No Yes bucket.name Name of the S3 bucket STRING No Yes key Key of the object STRING No Yes async Toggle async mode false BOOL Yes Yes credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No storage.class AWS storage class standard STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No versioning.enabled Flag to enable versioning support in the bucket false STRING Yes No bucket.acl Access control list for the bucket EMPTY_STRING STRING Yes No Examples EXAMPLE 1 from FooStream#s3:upload('/Users/wso2/files/stocks.txt', 's3-file-bucket', '/uploads/stocks.txt') Creates an object with the file content at '/uploads/stocks.txt' in the bucket. Sink s3 (Sink) S3 sink publishes events as Amazon AWS S3 buckets. Syntax @sink(type= s3 , credential.provider.class= STRING , aws.access.key= STRING , aws.secret.key= STRING , bucket.name= STRING , aws.region= STRING , versioning.enabled= BOOL , object.path= STRING , storage.class= STRING , content.type= STRING , bucket.acl= STRING , node.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No bucket.name Name of the S3 bucket STRING No No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No versioning.enabled Flag to enable versioning support in the bucket false BOOL Yes No object.path Path for each S3 object STRING No Yes storage.class AWS storage class standard STRING Yes No content.type Content type of the event application/octet-stream STRING Yes Yes bucket.acl Access control list for the bucket EMPTY_STRING STRING Yes No node.id The node ID of the current publisher. This needs to be unique for each publisher instance as it may cause object overwrites while uploading the objects to same S3 bucket from different publishers. EMPTY_STRING STRING Yes No Examples EXAMPLE 1 @sink(type='s3', bucket.name='user-stream-bucket',object.path='bar/users', credential.provider='software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider', flush.size='3', @map(type='json', enclosing.element='$.user', @payload( { name : {{name}} , age : {{age}}} ))) define stream UserStream(name string, age int); This creates a S3 bucket named 'user-stream-bucket'. Then this will collect 3 events together and create a JSON object and save that in S3.","title":"1.0.5"},{"location":"api/1.0.5/#api-docs-v105","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v1.0.5"},{"location":"api/1.0.5/#s3","text":"","title":"S3"},{"location":"api/1.0.5/#copy-stream-function","text":"Copy a file within Amazon AWS S3 buckets. Syntax s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key, STRING versioning.enabled) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key, STRING versioning.enabled, STRING bucket.acl) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic from.bucket.name Name of the S3 bucket which is copying from STRING No Yes from.key Key of the object to be copied STRING No Yes bucket.name Name of the destination S3 bucket STRING No Yes key Key of the destination object STRING No Yes async Toggle async mode false BOOL Yes Yes credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No storage.class AWS storage class for the destination object standard STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No versioning.enabled Flag to enable versioning support in the destination bucket false STRING Yes No bucket.acl Access control list for the destination bucket EMPTY_STRING STRING Yes No Examples EXAMPLE 1 from FooStream#s3:copy('stock-source-bucket', 'stocks.txt', 'stock-backup-bucket', '/backup/stocks.txt') Copy object from one bucket to another.","title":"copy (Stream Function)"},{"location":"api/1.0.5/#delete-stream-function","text":"Delete an object from an Amazon AWS S3 bucket Syntax s3:delete( STRING bucket.name, STRING key) s3:delete( STRING bucket.name, STRING key, BOOL async) s3:delete( STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class) s3:delete( STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region) s3:delete( STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING aws.access.key, STRING aws.secret.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic bucket.name Name of the S3 bucket STRING No Yes key Key of the object STRING No Yes async Toggle async mode false BOOL Yes Yes credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No Examples EXAMPLE 1 from FooStream#s3:delete('s3-file-bucket', '/uploads/stocks.txt') Delete the object at '/uploads/stocks.txt' from the bucket.","title":"delete (Stream Function)"},{"location":"api/1.0.5/#uploadfile-stream-function","text":"Uploads a file to an Amazon AWS S3 bucket Syntax s3:uploadFile( STRING file.path, STRING bucket.name, STRING key) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key, STRING versioning.enabled) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key, STRING versioning.enabled, STRING bucket.acl) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path Path of the file to be uploaded STRING No Yes bucket.name Name of the S3 bucket STRING No Yes key Key of the object STRING No Yes async Toggle async mode false BOOL Yes Yes credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No storage.class AWS storage class standard STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No versioning.enabled Flag to enable versioning support in the bucket false STRING Yes No bucket.acl Access control list for the bucket EMPTY_STRING STRING Yes No Examples EXAMPLE 1 from FooStream#s3:upload('/Users/wso2/files/stocks.txt', 's3-file-bucket', '/uploads/stocks.txt') Creates an object with the file content at '/uploads/stocks.txt' in the bucket.","title":"uploadFile (Stream Function)"},{"location":"api/1.0.5/#sink","text":"","title":"Sink"},{"location":"api/1.0.5/#s3-sink","text":"S3 sink publishes events as Amazon AWS S3 buckets. Syntax @sink(type= s3 , credential.provider.class= STRING , aws.access.key= STRING , aws.secret.key= STRING , bucket.name= STRING , aws.region= STRING , versioning.enabled= BOOL , object.path= STRING , storage.class= STRING , content.type= STRING , bucket.acl= STRING , node.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No bucket.name Name of the S3 bucket STRING No No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No versioning.enabled Flag to enable versioning support in the bucket false BOOL Yes No object.path Path for each S3 object STRING No Yes storage.class AWS storage class standard STRING Yes No content.type Content type of the event application/octet-stream STRING Yes Yes bucket.acl Access control list for the bucket EMPTY_STRING STRING Yes No node.id The node ID of the current publisher. This needs to be unique for each publisher instance as it may cause object overwrites while uploading the objects to same S3 bucket from different publishers. EMPTY_STRING STRING Yes No Examples EXAMPLE 1 @sink(type='s3', bucket.name='user-stream-bucket',object.path='bar/users', credential.provider='software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider', flush.size='3', @map(type='json', enclosing.element='$.user', @payload( { name : {{name}} , age : {{age}}} ))) define stream UserStream(name string, age int); This creates a S3 bucket named 'user-stream-bucket'. Then this will collect 3 events together and create a JSON object and save that in S3.","title":"s3 (Sink)"},{"location":"api/latest/","text":"API Docs - v1.0.5 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. S3 copy (Stream Function) Copy a file within Amazon AWS S3 buckets. Syntax s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key, STRING versioning.enabled) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key, STRING versioning.enabled, STRING bucket.acl) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic from.bucket.name Name of the S3 bucket which is copying from STRING No Yes from.key Key of the object to be copied STRING No Yes bucket.name Name of the destination S3 bucket STRING No Yes key Key of the destination object STRING No Yes async Toggle async mode false BOOL Yes Yes credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No storage.class AWS storage class for the destination object standard STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No versioning.enabled Flag to enable versioning support in the destination bucket false STRING Yes No bucket.acl Access control list for the destination bucket EMPTY_STRING STRING Yes No Examples EXAMPLE 1 from FooStream#s3:copy('stock-source-bucket', 'stocks.txt', 'stock-backup-bucket', '/backup/stocks.txt') Copy object from one bucket to another. delete (Stream Function) Delete an object from an Amazon AWS S3 bucket Syntax s3:delete( STRING bucket.name, STRING key) s3:delete( STRING bucket.name, STRING key, BOOL async) s3:delete( STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class) s3:delete( STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region) s3:delete( STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING aws.access.key, STRING aws.secret.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic bucket.name Name of the S3 bucket STRING No Yes key Key of the object STRING No Yes async Toggle async mode false BOOL Yes Yes credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No Examples EXAMPLE 1 from FooStream#s3:delete('s3-file-bucket', '/uploads/stocks.txt') Delete the object at '/uploads/stocks.txt' from the bucket. uploadFile (Stream Function) Uploads a file to an Amazon AWS S3 bucket Syntax s3:uploadFile( STRING file.path, STRING bucket.name, STRING key) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key, STRING versioning.enabled) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key, STRING versioning.enabled, STRING bucket.acl) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path Path of the file to be uploaded STRING No Yes bucket.name Name of the S3 bucket STRING No Yes key Key of the object STRING No Yes async Toggle async mode false BOOL Yes Yes credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No storage.class AWS storage class standard STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No versioning.enabled Flag to enable versioning support in the bucket false STRING Yes No bucket.acl Access control list for the bucket EMPTY_STRING STRING Yes No Examples EXAMPLE 1 from FooStream#s3:upload('/Users/wso2/files/stocks.txt', 's3-file-bucket', '/uploads/stocks.txt') Creates an object with the file content at '/uploads/stocks.txt' in the bucket. Sink s3 (Sink) S3 sink publishes events as Amazon AWS S3 buckets. Syntax @sink(type= s3 , credential.provider.class= STRING , aws.access.key= STRING , aws.secret.key= STRING , bucket.name= STRING , aws.region= STRING , versioning.enabled= BOOL , object.path= STRING , storage.class= STRING , content.type= STRING , bucket.acl= STRING , node.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No bucket.name Name of the S3 bucket STRING No No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No versioning.enabled Flag to enable versioning support in the bucket false BOOL Yes No object.path Path for each S3 object STRING No Yes storage.class AWS storage class standard STRING Yes No content.type Content type of the event application/octet-stream STRING Yes Yes bucket.acl Access control list for the bucket EMPTY_STRING STRING Yes No node.id The node ID of the current publisher. This needs to be unique for each publisher instance as it may cause object overwrites while uploading the objects to same S3 bucket from different publishers. EMPTY_STRING STRING Yes No Examples EXAMPLE 1 @sink(type='s3', bucket.name='user-stream-bucket',object.path='bar/users', credential.provider='software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider', flush.size='3', @map(type='json', enclosing.element='$.user', @payload( { name : {{name}} , age : {{age}}} ))) define stream UserStream(name string, age int); This creates a S3 bucket named 'user-stream-bucket'. Then this will collect 3 events together and create a JSON object and save that in S3.","title":"latest"},{"location":"api/latest/#api-docs-v105","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v1.0.5"},{"location":"api/latest/#s3","text":"","title":"S3"},{"location":"api/latest/#copy-stream-function","text":"Copy a file within Amazon AWS S3 buckets. Syntax s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key, STRING versioning.enabled) s3:copy( STRING from.bucket.name, STRING from.key, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key, STRING versioning.enabled, STRING bucket.acl) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic from.bucket.name Name of the S3 bucket which is copying from STRING No Yes from.key Key of the object to be copied STRING No Yes bucket.name Name of the destination S3 bucket STRING No Yes key Key of the destination object STRING No Yes async Toggle async mode false BOOL Yes Yes credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No storage.class AWS storage class for the destination object standard STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No versioning.enabled Flag to enable versioning support in the destination bucket false STRING Yes No bucket.acl Access control list for the destination bucket EMPTY_STRING STRING Yes No Examples EXAMPLE 1 from FooStream#s3:copy('stock-source-bucket', 'stocks.txt', 'stock-backup-bucket', '/backup/stocks.txt') Copy object from one bucket to another.","title":"copy (Stream Function)"},{"location":"api/latest/#delete-stream-function","text":"Delete an object from an Amazon AWS S3 bucket Syntax s3:delete( STRING bucket.name, STRING key) s3:delete( STRING bucket.name, STRING key, BOOL async) s3:delete( STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class) s3:delete( STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region) s3:delete( STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING aws.access.key, STRING aws.secret.key) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic bucket.name Name of the S3 bucket STRING No Yes key Key of the object STRING No Yes async Toggle async mode false BOOL Yes Yes credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No Examples EXAMPLE 1 from FooStream#s3:delete('s3-file-bucket', '/uploads/stocks.txt') Delete the object at '/uploads/stocks.txt' from the bucket.","title":"delete (Stream Function)"},{"location":"api/latest/#uploadfile-stream-function","text":"Uploads a file to an Amazon AWS S3 bucket Syntax s3:uploadFile( STRING file.path, STRING bucket.name, STRING key) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key, STRING versioning.enabled) s3:uploadFile( STRING file.path, STRING bucket.name, STRING key, BOOL async, STRING credential.provider.class, STRING aws.region, STRING storage.class, STRING aws.access.key, STRING aws.secret.key, STRING versioning.enabled, STRING bucket.acl) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic file.path Path of the file to be uploaded STRING No Yes bucket.name Name of the S3 bucket STRING No Yes key Key of the object STRING No Yes async Toggle async mode false BOOL Yes Yes credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No storage.class AWS storage class standard STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No versioning.enabled Flag to enable versioning support in the bucket false STRING Yes No bucket.acl Access control list for the bucket EMPTY_STRING STRING Yes No Examples EXAMPLE 1 from FooStream#s3:upload('/Users/wso2/files/stocks.txt', 's3-file-bucket', '/uploads/stocks.txt') Creates an object with the file content at '/uploads/stocks.txt' in the bucket.","title":"uploadFile (Stream Function)"},{"location":"api/latest/#sink","text":"","title":"Sink"},{"location":"api/latest/#s3-sink","text":"S3 sink publishes events as Amazon AWS S3 buckets. Syntax @sink(type= s3 , credential.provider.class= STRING , aws.access.key= STRING , aws.secret.key= STRING , bucket.name= STRING , aws.region= STRING , versioning.enabled= BOOL , object.path= STRING , storage.class= STRING , content.type= STRING , bucket.acl= STRING , node.id= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic credential.provider.class AWS credential provider class to be used. If blank along with the username and the password, default credential provider will be used. EMPTY_STRING STRING Yes No aws.access.key AWS access key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No aws.secret.key AWS secret key. This cannot be used along with the credential.provider.class EMPTY_STRING STRING Yes No bucket.name Name of the S3 bucket STRING No No aws.region The region to be used to create the bucket EMPTY_STRING STRING Yes No versioning.enabled Flag to enable versioning support in the bucket false BOOL Yes No object.path Path for each S3 object STRING No Yes storage.class AWS storage class standard STRING Yes No content.type Content type of the event application/octet-stream STRING Yes Yes bucket.acl Access control list for the bucket EMPTY_STRING STRING Yes No node.id The node ID of the current publisher. This needs to be unique for each publisher instance as it may cause object overwrites while uploading the objects to same S3 bucket from different publishers. EMPTY_STRING STRING Yes No Examples EXAMPLE 1 @sink(type='s3', bucket.name='user-stream-bucket',object.path='bar/users', credential.provider='software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider', flush.size='3', @map(type='json', enclosing.element='$.user', @payload( { name : {{name}} , age : {{age}}} ))) define stream UserStream(name string, age int); This creates a S3 bucket named 'user-stream-bucket'. Then this will collect 3 events together and create a JSON object and save that in S3.","title":"s3 (Sink)"}]}